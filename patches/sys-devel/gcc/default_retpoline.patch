diff -ur gcc-9.2.0.orig/gcc/common.opt gcc-9.2.0/gcc/common.opt
--- gcc-9.2.0.orig/gcc/common.opt	2020-01-12 17:23:12.596342248 +0000
+++ gcc-9.2.0/gcc/common.opt	2020-01-12 17:23:56.296565496 +0000
@@ -1486,7 +1486,7 @@
 Place each function into its own section.
 
 fgcse
-Common Report Var(flag_gcse) Optimization
+Common Report Var(flag_gcse) Init(1) Optimization
 Perform global common subexpression elimination.
 
 fgcse-lm
@@ -1648,7 +1648,7 @@
 Enable inlining of function declared \"inline\", disabling disables all inlining.
 
 finline-small-functions
-Common Report Var(flag_inline_small_functions) Optimization
+Common Report Var(flag_inline_small_functions) Init(1) Optimization
 Integrate functions into their callers when code size is known not to grow.
 
 finline-functions
@@ -2056,7 +2056,7 @@
 Generate position-independent code for executables if possible (small mode).
 
 fplt
-Common Report Var(flag_plt) Init(1) Optimization
+Common Report Var(flag_plt) Init(0) Optimization
 Use PLT for PIC calls (-fno-plt: load the address from GOT at call site).
 
 fplugin=
diff -ur gcc-9.2.0.orig/gcc/config/i386/i386.opt gcc-9.2.0/gcc/config/i386/i386.opt
--- gcc-9.2.0.orig/gcc/config/i386/i386.opt	2020-01-12 17:23:12.597342254 +0000
+++ gcc-9.2.0/gcc/config/i386/i386.opt	2020-01-12 17:26:24.385322101 +0000
@@ -1038,11 +1038,11 @@
 Make all function calls indirect.
 
 mindirect-branch=
-Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_keep)
+Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_thunk)
 Convert indirect call and jump to call and return thunks.
 
 mfunction-return=
-Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_keep)
+Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_thunk)
 Convert function return to call and return thunk.
 
 Enum
@@ -1062,7 +1062,7 @@
 Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)
 
 mindirect-branch-register
-Target Report Var(ix86_indirect_branch_register) Init(0)
+Target Report Var(ix86_indirect_branch_register) Init(1)
 Force indirect call and jump via register.
 
 mmovdiri
diff -ur gcc-9.2.0.orig/gcc/opts.c gcc-9.2.0/gcc/opts.c
--- gcc-9.2.0.orig/gcc/opts.c	2020-01-12 17:23:12.597342254 +0000
+++ gcc-9.2.0/gcc/opts.c	2020-01-12 17:25:43.717114310 +0000
@@ -313,6 +313,9 @@
 
   /* Some targets have other target-specific initialization.  */
   targetm_common.option_init_struct (opts);
+
+  /* -O1 default for Spectre mitigation */
+  opts->x_optimize = 1;
 }
 
 /* Release any allocations owned by OPTS.  */
@@ -493,10 +496,8 @@
     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize_speculatively, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fexpensive_optimizations, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_fgcse, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fhoist_adjacent_loads, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_findirect_inlining, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_finline_small_functions, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fipa_bit_cp, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fipa_cp, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fipa_icf, NULL, 1 },
