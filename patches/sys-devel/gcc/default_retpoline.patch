diff --git a/gcc/common.opt b/gcc/common.opt
index a88778b4e..81dc85887 100644
--- a/gcc/common.opt
+++ b/gcc/common.opt
@@ -1590,7 +1590,7 @@ Common Var(flag_function_sections)
 Place each function into its own section.
 
 fgcse
-Common Var(flag_gcse) Optimization
+Common Var(flag_gcse) Init(1) Optimization
 Perform global common subexpression elimination.
 
 fgcse-lm
@@ -1757,7 +1757,7 @@ Common Var(flag_no_inline,0) Init(0) Optimization
 Enable inlining of function declared \"inline\", disabling disables all inlining.
 
 finline-small-functions
-Common Var(flag_inline_small_functions) Optimization
+Common Var(flag_inline_small_functions) Init(1) Optimization
 Integrate functions into their callers when code size is known not to grow.
 
 finline-functions
@@ -2176,7 +2176,7 @@ Common Var(flag_pie,1) Negative(fPIC) Init(-1)
 Generate position-independent code for executables if possible (small mode).
 
 fplt
-Common Var(flag_plt) Init(1) Optimization
+Common Var(flag_plt) Init(0) Optimization
 Use PLT for PIC calls (-fno-plt: load the address from GOT at call site).
 
 fplugin=
diff --git a/gcc/config/i386/i386.opt b/gcc/config/i386/i386.opt
index c781fdc82..766c2bf61 100644
--- a/gcc/config/i386/i386.opt
+++ b/gcc/config/i386/i386.opt
@@ -1049,11 +1049,11 @@ Target Var(flag_force_indirect_call) Init(0)
 Make all function calls indirect.
 
 mindirect-branch=
-Target RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_keep)
+Target RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_thunk)
 Convert indirect call and jump to call and return thunks.
 
 mfunction-return=
-Target RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_keep)
+Target RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_thunk)
 Convert function return to call and return thunk.
 
 Enum
@@ -1073,7 +1073,7 @@ EnumValue
 Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)
 
 mindirect-branch-register
-Target Var(ix86_indirect_branch_register) Init(0)
+Target Var(ix86_indirect_branch_register) Init(1)
 Force indirect call and jump via register.
 
 mmovdiri
diff --git a/gcc/opts.c b/gcc/opts.c
index 24bb64198..bf93c0407 100644
--- a/gcc/opts.c
+++ b/gcc/opts.c
@@ -306,6 +306,9 @@ init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)
 
   /* Some targets have other target-specific initialization.  */
   targetm_common.option_init_struct (opts);
+
+  /* -O1 default for Spectre mitigation */
+  opts->x_optimize = 1;
 }
 
 /* If indicated by the optimization level LEVEL (-Os if SIZE is set,
@@ -481,10 +484,8 @@ static const struct default_options default_options_table[] =
     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fdevirtualize_speculatively, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fexpensive_optimizations, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_fgcse, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fhoist_adjacent_loads, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_findirect_inlining, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_finline_small_functions, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fipa_bit_cp, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fipa_cp, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fipa_icf, NULL, 1 },
