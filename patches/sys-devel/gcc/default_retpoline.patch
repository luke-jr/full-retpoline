diff -ur /tmp/gcc-7.3.0/gcc/common.opt gcc-7.3.0/gcc/common.opt
--- /tmp/gcc-7.3.0/gcc/common.opt	2018-02-12 05:05:10.868052102 +0000
+++ gcc-7.3.0/gcc/common.opt	2018-02-12 05:05:21.590151238 +0000
@@ -1407,7 +1407,7 @@
 Place each function into its own section.
 
 fgcse
-Common Report Var(flag_gcse) Optimization
+Common Report Var(flag_gcse) Init(1) Optimization
 Perform global common subexpression elimination.
 
 fgcse-lm
@@ -1569,7 +1569,7 @@
 Enable inlining of function declared \"inline\", disabling disables all inlining.
 
 finline-small-functions
-Common Report Var(flag_inline_small_functions) Optimization
+Common Report Var(flag_inline_small_functions) Init(1) Optimization
 Integrate functions into their callers when code size is known not to grow.
 
 finline-functions
@@ -1942,7 +1942,7 @@
 Generate position-independent code for executables if possible (small mode).
 
 fplt
-Common Report Var(flag_plt) Init(1) Optimization
+Common Report Var(flag_plt) Init(0) Optimization
 Use PLT for PIC calls (-fno-plt: load the address from GOT at call site).
 
 fplugin=
diff -ur /tmp/gcc-7.3.0/gcc/config/i386/i386.opt gcc-7.3.0/gcc/config/i386/i386.opt
--- /tmp/gcc-7.3.0/gcc/config/i386/i386.opt	2018-02-12 05:05:10.881052222 +0000
+++ gcc-7.3.0/gcc/config/i386/i386.opt	2018-02-12 05:05:21.600151330 +0000
@@ -929,11 +929,11 @@
 Generate code which uses only the general registers.
 
 mindirect-branch=
-Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_keep)
+Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_indirect_branch) Init(indirect_branch_thunk)
 Convert indirect call and jump to call and return thunks.
 
 mfunction-return=
-Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_keep)
+Target Report RejectNegative Joined Enum(indirect_branch) Var(ix86_function_return) Init(indirect_branch_thunk)
 Convert function return to call and return thunk.
 
 Enum
@@ -953,5 +953,5 @@
 Enum(indirect_branch) String(thunk-extern) Value(indirect_branch_thunk_extern)
 
 mindirect-branch-register
-Target Report Var(ix86_indirect_branch_register) Init(0)
+Target Report Var(ix86_indirect_branch_register) Init(1)
 Force indirect call and jump via register.
diff -ur /tmp/gcc-7.3.0/gcc/opts.c gcc-7.3.0/gcc/opts.c
--- /tmp/gcc-7.3.0/gcc/opts.c	2018-02-12 05:05:10.881052222 +0000
+++ gcc-7.3.0/gcc/opts.c	2018-02-12 05:05:21.600151330 +0000
@@ -313,6 +313,9 @@
 
   /* Some targets have other target-specific initialization.  */
   targetm_common.option_init_struct (opts);
+
+  /* -O1 default for Spectre mitigation */
+  opts->x_optimize = 1;
 }
 
 /* Release any allocations owned by OPTS.  */
diff -ur gcc-7.3.0/gcc/opts.c gcc-7.3.0/gcc/opts.c
--- gcc-7.3.0/gcc/opts.c	2018-02-27 18:36:26.256172876 +0000
+++ gcc-7.3.0/gcc/opts.c	2018-02-28 04:03:51.722633420 +0000
@@ -481,14 +481,12 @@
     { OPT_LEVELS_1_PLUS, OPT_ftree_builtin_call_dce, NULL, 1 },
 
     /* -O2 optimizations.  */
-    { OPT_LEVELS_2_PLUS, OPT_finline_small_functions, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_findirect_inlining, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fpartial_inlining, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fthread_jumps, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fcrossjumping, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_foptimize_sibling_calls, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fcse_follow_jumps, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_fgcse, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fexpensive_optimizations, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_frerun_cse_after_loop, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fcaller_saves, NULL, 1 },
